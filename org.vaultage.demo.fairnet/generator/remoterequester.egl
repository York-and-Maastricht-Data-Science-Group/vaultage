[% import 'util.eol'; %]
package [%=packageName%];

import java.util.List;

import org.vaultage.core.VaultageMessage;
import org.vaultage.core.VaultageServer;

public class RemoteRequester {

	private static final int SLEEP_TIME = 40;
	protected VaultageServer vaultageServer;
	protected FairnetVault requesterVault;

	public RemoteRequester(VaultageServer vaultageServer, FairnetVault vault) throws Exception {
		this.vaultageServer = vaultageServer;
		this.requesterVault = vault;
	}

[% for (eOperation in class.getPublicEOperations()){ %]
	[%= eOperation.getAccessModifier()%] [%= eOperation.getReturnType()%] [%= eOperation.name %]([%=eOperation.getParams()%]) throws Exception {
		
		VaultageMessage message = new VaultageMessage();
		message.setSenderId(requesterVault.getId());
		message.setFrom(requesterVault.getPublicKey());
		message.setTo(friendPublicKey);
		message.setOperation(GetPostRequestHandler.class.getName());
[% var i = 1; %]
[% for (eParamater in eOperation.eParameters) { %]
[% 		if ( i > 1) {	%]
		// message.putValue("eParameter.name", eParameter.name);
[%		}	%]		
[% 		i = i + 1; %]
[% } %]
		this.requesterVault.getVaultage().sendMessage(message.getTo(), requesterVault.getPublicKey(),
				requesterVault.getPrivateKey(), message);

		Thread.sleep(SLEEP_TIME);
		throw new Exception();
		
		//return requesterVault.getGetPostResponseHandler().getPost();
	}
	
[% } %]	
	
	
}