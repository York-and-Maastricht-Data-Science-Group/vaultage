[% import 'util.eol'; %]
package [%=packageNameGen%];

import java.util.List;

import org.vaultage.core.VaultageMessage;
import org.vaultage.core.VaultageServer;
import [%=packageNameApp%].[%=vaultClassName%];

[% for (eOperation in class.getPublicEOperations()){ %]
import [%=packageNameApp%].[%= eOperation.name.firstToUpperCase()%]RequestHandler;
import [%=packageNameApp%].[%= eOperation.name.firstToUpperCase()%]ResponseHandler;	
[% }%]

public class RemoteRequester {

	protected VaultageServer vaultageServer;
	protected [%=vaultClassName%] requesterVault;

	public RemoteRequester(VaultageServer vaultageServer, [%=vaultClassName%] vault) throws Exception {
		this.vaultageServer = vaultageServer;
		this.requesterVault = vault;
	}

[% for (eOperation in class.getPublicEOperations()){ %]
	[%= eOperation.getAccessModifier()%] [%= eOperation.getReturnType()%] [%= eOperation.name %]([%=eOperation.getParams()%]) throws Exception {
		
		VaultageMessage message = new VaultageMessage();
		message.setSenderId(requesterVault.getId());
		message.setFrom(requesterVault.getPublicKey());
		message.setTo(friendPublicKey);
		message.setOperation([%= eOperation.getClassRequestHandlerName() %].class.getName());
[% var i = 1; %]
[% for (eParamater in eOperation.eParameters) { %]
[% 		if ( i > 1) {	%]
		message.putValue("[%=eParamater.name%]", [%=eParamater.name%]);
[%		}	%]		
[% 		i = i + 1; %]
[% } %]
		
		this.requesterVault.get[%= eOperation.getClassResponseBaseHandlerName() %]().setCallerThread(Thread.currentThread());
		
		this.requesterVault.getVaultage().sendMessage(message.getTo(), requesterVault.getPublicKey(),
				requesterVault.getPrivateKey(), message);

		synchronized (Thread.currentThread()) {
			Thread.currentThread().wait();
		}
		
		return ([%= eOperation.getReturnType()%]) requesterVault.get[%= eOperation.getClassResponseBaseHandlerName() %]().getResult();
	}
	
[% } %]	
	
	
}