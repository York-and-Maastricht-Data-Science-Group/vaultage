var localVault = FairnetVault.all.first();
//var remoteVaults = Sequence{};
var remoteVaults = localVault.remoteVaults.values();
remoteVaults.println();

//remoteVaults.println();
//for (friend in localVault.friends){
//    var friendVault = new RemoteFairnetVault;
//    friendVault.localVault = localVault;
//    friendVault.remotePublicKey = friend.publicKey;
//	remoteVaults.add(friendVault);
//}

var allPosts = Sequence{};

/* the parent of a property call is a expression statement */
remoteVaults.first().posts;
//
/* the parent of a property call is an operation */
var post1 = remoteVaults.second().posts.first();
"post1: ".print(); post1.println();
allPosts.add(post1);
//
/* the parent of a property call is an assignment statement */
//var post2 = remoteVaults.first().posts;
//"post2: ".print(); post2.println();
//allPosts.addAll(post2);
//
var condition = true;
var endString = "01";

/* the parent of a property call is a first order operation and 
   request remoteVaults' and localVault's Posts in ONE statement */
var allVaults = Sequence{};
allVaults.addAll(remoteVaults);
allVaults.add(localVault);
allPosts = allVaults.parallelCollect( rv| rv.posts.parallelSelect(p | p.isPublic = condition
	and p.content.endsWith(endString))).flatten();

return allPosts;


			