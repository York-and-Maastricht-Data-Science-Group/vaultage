[% import 'Util.eol'; %]
package [%=packageName%];

import java.util.List;

import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageMessage;
import org.vaultage.core.VaultageServer;
// import [%=packageName%].[%=vaultClassName%];

[% for (eOperation in class.eOperations){ %]
// import [%=packageName%].[%= eOperation.name.firstToUpperCase()%]RequestHandler;
// import [%=packageName%].[%= eOperation.name.firstToUpperCase()%]ResponseHandler;	
[% }%]

public class RemoteRequester {

	protected VaultageServer vaultageServer;
	protected [%=vaultClassName%]Base localVault;

	public RemoteRequester(VaultageServer vaultageServer, [%=vaultClassName%]Base vault) throws Exception {
		this.vaultageServer = vaultageServer;
		this.localVault = vault;
	}

[% for (eOperation in class.eOperations){ %]

	//async request
	public void request[%= eOperation.name.firstToUpperCase() %]([%=eOperation.getRequesteeParams()%]) throws Exception {
		
		VaultageMessage message = new VaultageMessage();
		message.setSenderId(localVault.getId());
		message.setFrom(localVault.getPublicKey());
		message.setTo(requesteePublicKey);
		message.setOperation([%= eOperation.getClassRequestHandlerName() %].class.getName());
		
		this.localVault.getVaultage().sendMessage(message.getTo(), localVault.getPublicKey(),
				localVault.getPrivateKey(), message);
	}
	
	//async response
	public void respondTo[%= eOperation.name.firstToUpperCase() %]([%=eOperation.getRespondToParams()%]) throws Exception {
		
		String value = Vaultage.Gson.toJson(result);
		
		VaultageMessage messageBack = new VaultageMessage();
		messageBack.setSenderId(localVault.getId());
		messageBack.setFrom(localVault.getPublicKey());
		messageBack.setTo(requesterPublicKey);
		messageBack.setOperation([%= eOperation.getClassResponseHandlerName() %].class.getName());
		messageBack.putValue("result", value);
		
		this.localVault.getVaultage().sendMessage(messageBack.getTo(), this.localVault.getPublicKey(), 
			this.localVault.getPrivateKey(), messageBack);
	}

	//sync request and response
	public [%= eOperation.getReturnType()%] [%= eOperation.name %]([%=eOperation.getRequesteeParams()%]) throws Exception {
		
		VaultageMessage message = new VaultageMessage();
		message.setSenderId(localVault.getId());
		message.setFrom(localVault.getPublicKey());
		message.setTo(requesteePublicKey);
		message.setOperation([%= eOperation.getClassRequestHandlerName() %].class.getName());
		
[% for (eParamater in eOperation.eParameters) { %]
		message.putValue("[%=eParamater.name%]", Vaultage.Gson.toJson([%=eParamater.name%]));
[% } %]
		
		this.localVault.get[%= eOperation.getClassResponseBaseHandlerName() %]().setCallerThread(Thread.currentThread());
		
		this.localVault.getVaultage().sendMessage(message.getTo(), localVault.getPublicKey(),
				localVault.getPrivateKey(), message);

		synchronized (Thread.currentThread()) {
			Thread.currentThread().wait();
		}
		
[% if (eOperation.getReturnType() <> "void") { %]
		return ([%= eOperation.getReturnType()%]) localVault.get[%= eOperation.getClassResponseBaseHandlerName() %]().getResult();
[% } %]		
	}
	
[% } %]	
	
	
}