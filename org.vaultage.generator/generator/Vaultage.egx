/***
 * A generator to produce a Vaultage implementation 
***/

import 'Util.eol';

pre {
	var javaSourcePath = "../src/";
	var javaGenPath = "../gen/";
	var packageName = EAnnotation.allInstances.selectOne(a | a.source == "http://www.eclipse.org/emf/2002/GenModel").details.selectOne( d | d.key = "basePackage").value;
	var packagePath =  packageName.replace("\\.", "/") + "/";
	var outputSource = javaSourcePath + packagePath;
	var outputGen = javaGenPath + packagePath;
	var vaultClassName = EClass.allInstances.selectOne( c | c.hasVaultAnnotation()).name;
	var requesterPublicKey = "String requesterPublicKey";
	var requesteePublicKey = "String requesteePublicKey";
	var ePackage = EPackage.all().first();
}

/***
 * To generate static classes
***/
rule StaticClasses transform class : EClass {
	guard : not class.hasVaultAnnotation() 
	parameters : Map {
  		"packageName" = packageName,     
    	"class" = class,
    	"parentClass" = "",
    	"requesterPublicKey"= requesterPublicKey
    }
  	template: "StaticClass.egl"
  	target: outputGen + class.filename()
}

/***
 * To generate a vault class
***/
rule VaultClass transform class : EClass {
	guard : class.hasVaultAnnotation() 
	parameters : Map {
  		"packageName" = packageName,    
    	"class" = class,
    	"parentClass" = "extends " + class.name + "Base",
    	"requesterPublicKey" = requesterPublicKey
    }
  	template: "VaultClass.egl"
  	target: outputSource + class.filename()
  	overwrite: false
}

/***

/***
 * To generate the base class of a vault class
***/
rule VaultBaseClass transform class : EClass {
	guard : class.hasVaultAnnotation()
	parameters : Map {
  		"packageName" = packageName,
    	"requesterPublicKey"= requesterPublicKey
    }
  	template: "VaultBase.egl"
  	target: outputGen + class.baseFilename()
}

/***
 * To generate a remote vault class
***/
rule RemoteVaultClass transform class : EClass {
	guard : class.hasVaultAnnotation()
	parameters : Map {
		"packageName" = packageName
	}
	template: "RemoteVault.egl"
	target: outputGen + class.remoteFilename()
}

/***
 * To generate response handler classes
***/
rule ResponseHandlerClasses transform eOperation : EOperation {
	guard : eOperation.eContainer.hasVaultAnnotation()
	parameters : Map {
		"packageName" = packageName,
		"requesterPublicKey"= requesterPublicKey
	}
	template: "ResponseHandler.egl"
	target: outputGen + eOperation.getResponseHandlerFilename()
}

/***
 *  Generate a class to start the broker service
***/
rule BrokerService {
	parameters : Map {
		"packageName" = packageName,
		"brokerName" = ePackage.getBrokerName()
	}
	template: "BrokerService.egl"
	target: outputSource + ePackage.getBrokerName() + ".java"
	overwrite: false
}
