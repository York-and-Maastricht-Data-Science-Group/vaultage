[% import 'Util.eol'; %]
package [%=packageNameGen%];

import java.util.ArrayList;
import java.util.List;
import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageHandler;
import org.vaultage.core.VaultageMessage;
import [%=packageNameApp%].[%= eOperation.eContainer.name %];
import [%=packageNameApp%].[%= eOperation.getClassResponseHandlerName() %];

public abstract class [%=eOperation.getClassRequestBaseHandlerName()%] extends VaultageHandler {
	
	@Override
	public void run() {

		try {
			[%= eOperation.eContainer.name %] me = ([%= eOperation.eContainer.name %]) this.vault;

[% if (eOperation.getReturnType() <> "void") { %]
			this.result = run(message);
[% } %]

			String value = Vaultage.Gson.toJson(result);

			VaultageMessage messageBack = new VaultageMessage();
			messageBack.setFrom(me.getPublicKey());
			messageBack.setTo(this.message.getFrom());
			messageBack.setOperation([%= eOperation.getClassResponseHandlerName() %].class.getName());
			messageBack.putValue("result", value);

			me.getVaultage().sendMessage(message.getFrom(), me.getPublicKey(), me.getPrivateKey(), messageBack);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public [%=eOperation.getReturnType()%] run(VaultageMessage senderMessage) throws Exception {

[% if (eOperation.getReturnType() <> "void") { %]
		return ([%= returnType %]) result;
[% } %]
	}
}