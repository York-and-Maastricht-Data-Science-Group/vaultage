[% import 'Util.eol'; %]
package [%=packageName%];

import java.util.ArrayList;
import java.util.List;
import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageHandler;
import org.vaultage.core.VaultageMessage;
// import [%=packageName%].[%= eOperation.eContainer.name %];
// import [%=packageName%].[%= eOperation.getClassResponseHandlerName() %];

public abstract class [%=eOperation.getClassRequestBaseHandlerName()%] extends VaultageHandler {
	public boolean isImmediatelyResponded = true;
	
	public void isImmediatelyResponded (boolean isImmediatelyResponded) {
		this.isImmediatelyResponded = isImmediatelyResponded;
	}
	
	public boolean isImmediatelyResponded () {
		return this.isImmediatelyResponded;
	}
	
	@Override
	public void run() {

		try {
			[%= eOperation.eContainer.name %] localVault = ([%= eOperation.eContainer.name %]) this.vault;

[% if (eOperation.getReturnType() <> "void") { %]
[% 		for (param in eOperation.eParameters){ %]
			[%=param.getType()%] [%=param.name%] = Vaultage.Gson.fromJson((String) message.getValue("[%=param.name%]"), [%=param.getTypeImplementation()%].class);
[%		}%]	this.result = run(message[%= eOperation.getParamsWithoutTypes() %]);
[% } %]
			if (isImmediatelyResponded){
				RemoteRequester remoteRequester = localVault.getRemoteRequester();
				remoteRequester.respondTo[%= eOperation.name.firstToUpperCase() %](message.getFrom()[%=eOperation.getRespondToParamsWithoutTypes()%]);
			}
			
		} catch (Exception e) {
			e.printStackTrace();
		}
	}

	public [%=eOperation.getReturnType()%] run(VaultageMessage message[%=eOperation.getParams()%]) throws Exception {

[% if (eOperation.getReturnType() <> "void") { %]
		return ([%= eOperation.getReturnType() %]) result;
[% } %]
	}
}