[% import 'Util.eol'; %]
package [%=packageName%];

import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.io.IOException;

import java.security.KeyPair;

import org.vaultage.util.VaultageEncryption;
import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageHandler;
import org.vaultage.core.VaultageServer;

public abstract class [%=class.getBaseName()%] {

	protected String id = UUID.randomUUID().toString();
	protected String privateKey;
	protected String publicKey;
	protected boolean isListening;
	protected Vaultage vaultage;
	protected VaultageServer vaultageServer;

[% for (eOperation in class.eOperations){ %]
	protected [%=eOperation.getClassResponseHandlerName()%] [%=eOperation.getClassResponseHandlerName().firstToLowerCase()%];
[% } %]	

	public [%=class.getBaseName()%]() throws Exception {
		this.isListening = false;
		this.vaultage = new Vaultage(this);
		vaultage.setRequestMessageHandler(new [%=appName%]RequestMessageHandler());
		vaultage.setResponseMessageHandler(new [%=appName%]ResponseMessageHandler());
		
		KeyPair keyPair = VaultageEncryption.generateKeys();
		this.publicKey = VaultageEncryption.getPublicKey(keyPair);
		this.privateKey = VaultageEncryption.getPrivateKey(keyPair);
	}
	
	public [%=class.getBaseName()%](String address, int port) throws Exception {
		this.isListening = false;
		this.vaultage = new Vaultage(this, address, port);
		vaultage.setRequestMessageHandler(new [%=appName%]RequestMessageHandler());
		vaultage.setResponseMessageHandler(new [%=appName%]ResponseMessageHandler());
		
		KeyPair keyPair = VaultageEncryption.generateKeys();
		this.publicKey = VaultageEncryption.getPublicKey(keyPair);
		this.privateKey = VaultageEncryption.getPrivateKey(keyPair);
	}
	
	public VaultageServer getVaultageServer(){
		return this.vaultageServer;
	}
	
	public String getId(){
		return this.id;
	}
	
	public void setId(String id){
		this.id = id;
	}
	
	public Vaultage getVaultage() {
		return vaultage;
	}

	public void setVaultage(Vaultage vaultage) {
		this.vaultage = vaultage;
	}
	
	public String getPrivateKey() {
		return privateKey;
	}

	public void setPrivateKey(String privateKey) {
		this.privateKey = privateKey;
	}

	public String getPublicKey() {
		return publicKey;
	}

	public void setPublicKey(String publicKey) {
		this.publicKey = publicKey;
	}

[% for (eOperation in class.eOperations){ %]
	public void set[%=eOperation.getClassResponseHandlerName()%]([%=eOperation.getClassResponseHandlerName()%] handler) {
		this.[%=eOperation.getClassResponseHandlerName().firstToLowerCase()%] = handler;
	}
	
	public [%=eOperation.getClassResponseHandlerName()%] get[%=eOperation.getClassResponseHandlerName()%]() {
		return [%=eOperation.getClassResponseHandlerName().firstToLowerCase()%];
	}
	
[% } %]

	public boolean register(VaultageServer vaultageServer) throws Exception {
		boolean isSuccess = vaultage.connect(vaultageServer.getAddress(), publicKey);
		this.vaultageServer = vaultageServer;
		if (isSuccess) {
			vaultage.subscribe(publicKey, privateKey);
			return true;
		}
		return false;
	}

	public void unregister() throws Exception {
		vaultage.disconnect();
	}
	
	public void shutdown() throws IOException, InterruptedException {
		vaultage.shutdown();
	}
	
	// operations
[% for (eOperation in class.eOperations){ %]
	public abstract void [%= eOperation.name %]([%=eOperation.getRequesterParams()%]) throws Exception;
[% } %]
}
