[% import 'Util.eol'; %]
package [%=packageName%];

import java.util.List;

import org.vaultage.core.Vault;
import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageMessage;
import org.vaultage.core.VaultageMessage.MessageType;

public class [%=class.remoteName()%] {

	//protected [%=class.name%] localVault;
	protected Vault localVault;
	protected String remotePublicKey;

	public String getRemotePublicKey() {
		return remotePublicKey;
	}

	//public [%=class.remoteName()%]([%=class.name%] localVault, String remotePublicKey) {
	public [%=class.remoteName()%](Vault localVault, String remotePublicKey) {
		this.localVault = localVault;
		this.remotePublicKey = remotePublicKey;
	}

[% for (eOperation in class.eOperations) { %]

	public String [%= eOperation.name %]([%=eOperation.getParams()%]) throws Exception {
		
		VaultageMessage request = new VaultageMessage();
		request.initToken();
		request.setSenderId(localVault.getId());
		request.setFrom(localVault.getPublicKey());
		request.setTo(remotePublicKey);
		request.setMessageType(MessageType.REQUEST);
		request.setOperation("[%= eOperation.name %]");
		
	[% for (eParamater in eOperation.eParameters) { %]
		request.putValue("[%=eParamater.name%]", Vaultage.serialise([%=eParamater.name%]));
	[% } %]

		localVault.getVaultage().sendMessage(request.getTo(), localVault.getPublicKey(),
				localVault.getPrivateKey(), request);

		return request.getToken();
	}
	
	[% if (eOperation.getReturnType() <> null) { %]
	
	public void respondTo[%=eOperation.name.firstToUpperCase()%]([%=eOperation.getReturnType() %] result, String token) throws Exception {
		
		VaultageMessage response = new VaultageMessage();
		response.setToken(token); // TODO: this token is not known by the vault
		response.setFrom(localVault.getPublicKey());
		response.setTo(remotePublicKey);
		response.setOperation("[%=eOperation.name%]");
		response.setMessageType(MessageType.RESPONSE);

		response.putValue("result", Vaultage.serialise(result));

		localVault.getVaultage().sendMessage(response.getTo(), localVault.getPublicKey(),
				localVault.getPrivateKey(), response);
	}
	[% } %]
[% } %]	
}
