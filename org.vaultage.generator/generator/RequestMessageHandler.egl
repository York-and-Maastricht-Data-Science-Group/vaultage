[% 	import 'Util.eol'; %]
[% 	var classes = ePackage.getVaultClasses(); %]
package [%=packageName%];

import java.lang.reflect.Constructor;
import java.net.InetSocketAddress;
import java.util.ArrayList;
import java.util.List;

import org.vaultage.core.RemoteVault;
import org.vaultage.core.RequestMessageHandler;
import org.vaultage.core.Vault;
import org.vaultage.core.Vaultage;
import org.vaultage.core.VaultageMessage;

public class [%=appName%]RequestMessageHandler extends RequestMessageHandler {

	@Override
	public void process(VaultageMessage message, String senderPublicKey, Object vault) throws Exception {
[% var count = 1; %]	
	super.process(message, senderPublicKey, vault);
[% for (class in classes) { %]
	[% if (count > 1) { %] 
	else 
	[% } %]
	if (vault instanceof [%=class.name%]){
		[%=class.name%] [%=class.name.firstToLowerCase()%] = ([%=class.name%]) vault;
		
		String requester = senderPublicKey;
		String operation = message.getOperation();
		String messageToken = message.getToken();
		
//		/***
//		 * Create a remote vault for every public key received from a request.
//		 */
//		if (Remote[%=class.name%].class.getName().equals(message.getRemoteVaultType())
//				&& ((Vault) vault).getRemoteVaults().get(senderPublicKey) == null) {
//			Class<?> remoteClass = Class.forName(message.getRemoteVaultType());
//			Constructor<?> constructor = remoteClass.getConstructor(Vault.class, String.class);
//			RemoteVault remoteVault = (RemoteVault) constructor.newInstance(vault, message.getFrom());
//			((Vault) vault).getRemoteVaults().put(senderPublicKey, remoteVault);
//		}
			
		switch (operation) {
[% for (eOperation in class.eOperations){ %]
	[% var isStreamed = (eOperation.eAnnotations.selectOne(e | e.source = "stream") <> null )? true : false; %]

		case "[%=eOperation.name%]": {
		[% for (eParameter in eOperation.eParameters){ %]
			[%=eParameter.getTypeName()%] [%=eParameter.name%] = Vaultage.deserialise(message.getValue("[%=eParameter.name%]"), [%=eParameter.getTypeImplementation()%].class);
		[% } %]
			[% if(not isStreamed) { %]
				[% if (eOperation.eParameters.size() > 0) { %]
					[%	
					var eAnnotation = eOperation.eAnnotations.selectOne(e | e.source = "vaultage");
					if (eAnnotation <> null and eAnnotation.details.one(e | e.key = "monetised" and e.value = "true")) { 
					%]
						[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken, [%= eOperation.getParamsWithoutTypes() %], message.getPaymentInformation());
					[% } else { %]
						[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken, [%= eOperation.getParamsWithoutTypes() %]);
					[% } %]
				[% } else { %]
					[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken);
				[% } %]
			[% /* if stream */ %]
			[% } else { %]
			String address = Vaultage.deserialise(message.getValue("receiverAddress"), String.class);
			int port = Integer.valueOf(Vaultage.deserialise(message.getValue("receiverPort"), String.class));
			InetSocketAddress receiverSocketAddress = new InetSocketAddress(address, port);
				[% if (eOperation.eParameters.size() > 0) { %]
					[%	
					var eAnnotation = eOperation.eAnnotations.selectOne(e | e.source = "vaultage");
					if (eAnnotation <> null and eAnnotation.details.one(e | e.key = "monetised" and e.value = "true")) { 
					%]
						[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken, receiverSocketAddress, [%= eOperation.getParamsWithoutTypes() %], message.getPaymentInformation());
					[% } else { %]
						[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken, receiverSocketAddress, [%= eOperation.getParamsWithoutTypes() %]);
					[% } %]
				[% } else { %]
					[%=class.name.firstToLowerCase()%].[%=eOperation.name%](requester, messageToken, receiverSocketAddress);
				[% } %]
			[% } %]
		}
			break;
[% } %]	default:
			//throw new Exception("Operation " + operation + " is not supported!");
		}
	}
[% 
		count = count + 1;
	} %]
	}
}
